// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.RestEase.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetReposFeature : Xunit.IClassFixture<GetReposFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetRepos.feature"
#line hidden
        
        public GetReposFeature(GetReposFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Get Repos,", "  As a Consumer of the Repos endpoint,\n  I can retrieve data about Repositories", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - default returns user owned repos")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - default returns user owned repos")]
        [Xunit.TraitAttribute("Category", "repos")]
        public virtual void ListUserRepositories_Type_DefaultReturnsUserOwnedRepos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - default returns user owned repos", null, new string[] {
                        "repos"});
#line 6
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
    testRunner.When("I get repos of \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Attribute",
                        "Value"});
            table1.AddRow(new string[] {
                        "Name",
                        ""});
            table1.AddRow(new string[] {
                        "Full Name",
                        ""});
            table1.AddRow(new string[] {
                        "Owner",
                        ""});
            table1.AddRow(new string[] {
                        "Description",
                        ""});
            table1.AddRow(new string[] {
                        "Url",
                        ""});
            table1.AddRow(new string[] {
                        "Html Url",
                        ""});
            table1.AddRow(new string[] {
                        "Default Branch",
                        ""});
            table1.AddRow(new string[] {
                        "Has Projects",
                        ""});
#line 9
    testRunner.Then("the list of repos contains", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - return repos user is member of")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - return repos user is member of")]
        public virtual void ListUserRepositories_Type_ReturnReposUserIsMemberOf()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - return repos user is member of", null, ((string[])(null)));
#line 20
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - return all user repos")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - return all user repos")]
        public virtual void ListUserRepositories_Type_ReturnAllUserRepos()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - return all user repos", null, ((string[])(null)));
#line 22
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - handles invalid option")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - handles invalid option")]
        public virtual void ListUserRepositories_Type_HandlesInvalidOption()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - handles invalid option", null, ((string[])(null)));
#line 24
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort - default returns when created in descending order")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort - default returns when created in descending order")]
        public virtual void ListUserRepositories_Sort_DefaultReturnsWhenCreatedInDescendingOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort - default returns when created in descending order", null, ((string[])(null)));
#line 26
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort - by last updated")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort - by last updated")]
        public virtual void ListUserRepositories_Sort_ByLastUpdated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort - by last updated", null, ((string[])(null)));
#line 28
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort - by last pushed")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort - by last pushed")]
        public virtual void ListUserRepositories_Sort_ByLastPushed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort - by last pushed", null, ((string[])(null)));
#line 30
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort - by full name")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort - by full name")]
        public virtual void ListUserRepositories_Sort_ByFullName()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort - by full name", null, ((string[])(null)));
#line 32
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort - handles invalid option")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort - handles invalid option")]
        public virtual void ListUserRepositories_Sort_HandlesInvalidOption()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort - handles invalid option", null, ((string[])(null)));
#line 34
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - direction - ascending")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - direction - ascending")]
        public virtual void ListUserRepositories_Direction_Ascending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - direction - ascending", null, ((string[])(null)));
#line 36
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - direction - descending")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - direction - descending")]
        public virtual void ListUserRepositories_Direction_Descending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - direction - descending", null, ((string[])(null)));
#line 38
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - direction - settings sort full name defaults direction t" +
            "o ascending")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - direction - settings sort full name defaults direction t" +
            "o ascending")]
        public virtual void ListUserRepositories_Direction_SettingsSortFullNameDefaultsDirectionToAscending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - direction - settings sort full name defaults direction t" +
                    "o ascending", null, ((string[])(null)));
#line 40
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - direction - handles invalid option")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - direction - handles invalid option")]
        public virtual void ListUserRepositories_Direction_HandlesInvalidOption()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - direction - handles invalid option", null, ((string[])(null)));
#line 42
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - not found - is handled")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List user repositories - not found - is handled")]
        public virtual void ListUserRepositories_NotFound_IsHandled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - not found - is handled", null, ((string[])(null)));
#line 44
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List all public repositories - returns all public repositories")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List all public repositories - returns all public repositories")]
        public virtual void ListAllPublicRepositories_ReturnsAllPublicRepositories()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all public repositories - returns all public repositories", null, ((string[])(null)));
#line 46
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List all public repositories - returns all public repositories since last reposit" +
            "ory id viewed")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Repos,")]
        [Xunit.TraitAttribute("Description", "List all public repositories - returns all public repositories since last reposit" +
            "ory id viewed")]
        public virtual void ListAllPublicRepositories_ReturnsAllPublicRepositoriesSinceLastRepositoryIdViewed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all public repositories - returns all public repositories since last reposit" +
                    "ory id viewed", null, ((string[])(null)));
#line 48
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetReposFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetReposFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.RestEase.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ReposFeature : Xunit.IClassFixture<ReposFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Repos.feature"
#line hidden
        
        public ReposFeature(ReposFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Repos", "  As a Consumer of the GitHub Repos endpoint,\n  I can retrieve data about Reposit" +
                    "ories", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - returns repositories")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - returns repositories")]
        public virtual void ListUserRepositories_ReturnsRepositories()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - returns repositories", null, ((string[])(null)));
#line 5
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 8
    testRunner.Then("repository \"csharp-specflow-restease\" is in the list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - handles not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - handles not found")]
        public virtual void ListUserRepositories_HandlesNotFound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - handles not found", null, ((string[])(null)));
#line 10
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 11
    testRunner.Given("username \"blargblablargblarg\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 12
    testRunner.When("I get repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
    testRunner.Then("the repos endpoint returns not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by created - ascending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by created - ascending")]
        public virtual void ListUserRepositories_SortByCreated_Ascending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by created - ascending", null, ((string[])(null)));
#line 15
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 16
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table1.AddRow(new string[] {
                        "sort",
                        "created"});
            table1.AddRow(new string[] {
                        "direction",
                        "asc"});
#line 17
    testRunner.And("query parameters", ((string)(null)), table1, "And ");
#line 21
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
    testRunner.Then("repositories are sorted by when they were created in ascending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by created - defaults to descending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by created - defaults to descending")]
        public virtual void ListUserRepositories_SortByCreated_DefaultsToDescending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by created - defaults to descending", null, ((string[])(null)));
#line 24
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 25
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table2.AddRow(new string[] {
                        "sort",
                        "created"});
#line 26
    testRunner.And("query parameters", ((string)(null)), table2, "And ");
#line 29
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 30
    testRunner.Then("repositories are sorted by when they were created in descending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by updated - ascending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by updated - ascending")]
        public virtual void ListUserRepositories_SortByUpdated_Ascending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by updated - ascending", null, ((string[])(null)));
#line 32
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 33
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table3.AddRow(new string[] {
                        "sort",
                        "updated"});
            table3.AddRow(new string[] {
                        "direction",
                        "asc"});
#line 34
    testRunner.And("query parameters", ((string)(null)), table3, "And ");
#line 38
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
    testRunner.Then("repositories are sorted by last updated in ascending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by updated - defaults to descending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by updated - defaults to descending")]
        public virtual void ListUserRepositories_SortByUpdated_DefaultsToDescending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by updated - defaults to descending", null, ((string[])(null)));
#line 41
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table4.AddRow(new string[] {
                        "sort",
                        "updated"});
#line 43
    testRunner.And("query parameters", ((string)(null)), table4, "And ");
#line 46
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 47
    testRunner.Then("repositories are sorted by last updated in descending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by pushed - ascending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by pushed - ascending")]
        public virtual void ListUserRepositories_SortByPushed_Ascending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by pushed - ascending", null, ((string[])(null)));
#line 49
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 50
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table5.AddRow(new string[] {
                        "sort",
                        "pushed"});
            table5.AddRow(new string[] {
                        "direction",
                        "asc"});
#line 51
    testRunner.And("query parameters", ((string)(null)), table5, "And ");
#line 55
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
    testRunner.Then("repositories are sorted by last pushed in ascending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by pushed - defaults to descending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by pushed - defaults to descending")]
        public virtual void ListUserRepositories_SortByPushed_DefaultsToDescending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by pushed - defaults to descending", null, ((string[])(null)));
#line 58
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 59
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table6.AddRow(new string[] {
                        "sort",
                        "pushed"});
#line 60
    testRunner.And("query parameters", ((string)(null)), table6, "And ");
#line 63
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 64
    testRunner.Then("repositories are sorted by last pushed in descending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by full name - defaults to ascending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by full name - defaults to ascending")]
        public virtual void ListUserRepositories_SortByFullName_DefaultsToAscending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by full name - defaults to ascending", null, ((string[])(null)));
#line 66
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 67
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table7.AddRow(new string[] {
                        "sort",
                        "full_name"});
#line 68
    testRunner.And("query parameters", ((string)(null)), table7, "And ");
#line 71
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 72
    testRunner.Then("repositories are sorted by full name in ascending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - sort by full name - descending")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - sort by full name - descending")]
        public virtual void ListUserRepositories_SortByFullName_Descending()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - sort by full name - descending", null, ((string[])(null)));
#line 74
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 75
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table8.AddRow(new string[] {
                        "sort",
                        "full_name"});
            table8.AddRow(new string[] {
                        "direction",
                        "desc"});
#line 76
    testRunner.And("query parameters", ((string)(null)), table8, "And ");
#line 80
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 81
    testRunner.Then("repositories are sorted by full name in descending direction", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - by all")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - by all")]
        public virtual void ListUserRepositories_Type_ByAll()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - by all", null, ((string[])(null)));
#line 83
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 84
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table9.AddRow(new string[] {
                        "type",
                        "all"});
#line 85
    testRunner.And("query parameters", ((string)(null)), table9, "And ");
#line 88
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
    testRunner.Then("the list contains repositories not owned by user \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 90
    testRunner.And("the list contains repositories owned by user \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - by owner")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - by owner")]
        public virtual void ListUserRepositories_Type_ByOwner()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - by owner", null, ((string[])(null)));
#line 92
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 93
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table10.AddRow(new string[] {
                        "type",
                        "owner"});
#line 94
    testRunner.And("query parameters", ((string)(null)), table10, "And ");
#line 97
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 98
    testRunner.Then("the list only contains repositories owned by user \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - by member")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - by member")]
        public virtual void ListUserRepositories_Type_ByMember()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - by member", null, ((string[])(null)));
#line 100
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 101
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table11.AddRow(new string[] {
                        "type",
                        "member"});
#line 102
    testRunner.And("query parameters", ((string)(null)), table11, "And ");
#line 105
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 106
    testRunner.Then("the list only contains repositories not owned by user \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List user repositories - type - defaults to owner")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List user repositories - type - defaults to owner")]
        public virtual void ListUserRepositories_Type_DefaultsToOwner()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List user repositories - type - defaults to owner", null, ((string[])(null)));
#line 108
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 109
    testRunner.Given("username \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 110
    testRunner.When("I get a list of repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 111
    testRunner.Then("the list only contains repositories owned by user \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List all public repositories - returns all public repositories in order they were" +
            " created")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List all public repositories - returns all public repositories in order they were" +
            " created")]
        public virtual void ListAllPublicRepositories_ReturnsAllPublicRepositoriesInOrderTheyWereCreated()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all public repositories - returns all public repositories in order they were" +
                    " created", null, ((string[])(null)));
#line 113
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 114
    testRunner.When("I get a list of all public repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 115
    testRunner.Then("the list contains repositories sorted by date created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List all public repositories - returns all public repositories in order they were" +
            " created since last repository id viewed")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List all public repositories - returns all public repositories in order they were" +
            " created since last repository id viewed")]
        public virtual void ListAllPublicRepositories_ReturnsAllPublicRepositoriesInOrderTheyWereCreatedSinceLastRepositoryIdViewed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all public repositories - returns all public repositories in order they were" +
                    " created since last repository id viewed", null, ((string[])(null)));
#line 117
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Parameter",
                        "Value"});
            table12.AddRow(new string[] {
                        "since",
                        "2000"});
#line 118
    testRunner.Given("query parameters", ((string)(null)), table12, "Given ");
#line 121
    testRunner.When("I get a list of all public repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
    testRunner.Then("the list contains repositories starting with id \"2000\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 123
    testRunner.And("the list contains repositories sorted by date created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="List all public repositories - basic information is available")]
        [Xunit.TraitAttribute("FeatureTitle", "Repos")]
        [Xunit.TraitAttribute("Description", "List all public repositories - basic information is available")]
        public virtual void ListAllPublicRepositories_BasicInformationIsAvailable()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("List all public repositories - basic information is available", null, ((string[])(null)));
#line 125
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 126
    testRunner.When("I get a list of all public repositories", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 127
    testRunner.Then("the list of repositories have basic information available", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ReposFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ReposFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion

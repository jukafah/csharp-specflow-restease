// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlow.RestEase.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GetUsersFeature : Xunit.IClassFixture<GetUsersFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "GetUsers.feature"
#line hidden
        
        public GetUsersFeature(GetUsersFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Get Users,", "  As a Consumer of the Users endpoint,\n  I can retrieve data about Users", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Get User - Returns data matching a unique User")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Users,")]
        [Xunit.TraitAttribute("Description", "Get User - Returns data matching a unique User")]
        public virtual void GetUser_ReturnsDataMatchingAUniqueUser()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get User - Returns data matching a unique User", null, ((string[])(null)));
#line 6
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
    testRunner.Given("the github api \"https://api.github.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
    testRunner.When("I get user \"jukafah\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Attribute",
                        "Value"});
            table1.AddRow(new string[] {
                        "ID",
                        "7843737"});
            table1.AddRow(new string[] {
                        "Repos Url",
                        "https://api.github.com/users/jukafah/repos"});
            table1.AddRow(new string[] {
                        "Bio",
                        "I do stuff sometimes."});
            table1.AddRow(new string[] {
                        "Blog",
                        ""});
            table1.AddRow(new string[] {
                        "Email",
                        "null"});
            table1.AddRow(new string[] {
                        "Name",
                        "Steve Momcilovic"});
            table1.AddRow(new string[] {
                        "Url",
                        "https://api.github.com/users/jukafah"});
            table1.AddRow(new string[] {
                        "Html Url",
                        "https://github.com/jukafah"});
#line 9
    testRunner.Then("the following data returns", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get User - Handles not found")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Users,")]
        [Xunit.TraitAttribute("Description", "Get User - Handles not found")]
        public virtual void GetUser_HandlesNotFound()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get User - Handles not found", null, ((string[])(null)));
#line 20
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
    testRunner.Given("the github api \"https://api.github.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
    testRunner.When("I get user \"blargblablargbla\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
    testRunner.Then("the service returns not found", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get Users - Returns data for all Users")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Users,")]
        [Xunit.TraitAttribute("Description", "Get Users - Returns data for all Users")]
        public virtual void GetUsers_ReturnsDataForAllUsers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Users - Returns data for all Users", null, ((string[])(null)));
#line 25
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
    testRunner.Given("the github api \"https://api.github.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
    testRunner.When("I get all users", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
    testRunner.Then("a list of users returns", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Get Users - Returns data for all Users since specific")]
        [Xunit.TraitAttribute("FeatureTitle", "Get Users,")]
        [Xunit.TraitAttribute("Description", "Get Users - Returns data for all Users since specific")]
        public virtual void GetUsers_ReturnsDataForAllUsersSinceSpecific()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get Users - Returns data for all Users since specific", null, ((string[])(null)));
#line 30
  this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 31
    testRunner.Given("the github api \"https://api.github.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
    testRunner.When("I get all users starting with id \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
    testRunner.Then("a list of users returns starting with id \"6\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GetUsersFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GetUsersFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
